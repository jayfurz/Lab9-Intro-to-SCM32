
part5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003974  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b4c  08003b4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b4c  08003b4c  00013b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b50  08003b50  00013b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  08003b60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08003b60  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d856  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc7  00000000  00000000  0002d892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002f460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  0002ff48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025dec  00000000  00000000  00030988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb8a  00000000  00000000  00056774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe68  00000000  00000000  000632fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014f166  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c78  00000000  00000000  0014f1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ae4 	.word	0x08003ae4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003ae4 	.word	0x08003ae4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fade 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f807 	bl	80004e6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f91a 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 f8e8 	bl	80006b0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80004e0:	f000 f854 	bl	800058c <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <main+0x18>

080004e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b096      	sub	sp, #88	; 0x58
 80004ea:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2244      	movs	r2, #68	; 0x44
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f003 faed 	bl	8003ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fa:	463b      	mov	r3, r7
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000508:	f44f 7000 	mov.w	r0, #512	; 0x200
 800050c:	f000 fe38 	bl	8001180 <HAL_PWREx_ControlVoltageScaling>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000516:	f000 f98b 	bl	8000830 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800051a:	230a      	movs	r3, #10
 800051c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000524:	2310      	movs	r3, #16
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000528:	2301      	movs	r3, #1
 800052a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	2302      	movs	r3, #2
 800052e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000538:	230a      	movs	r3, #10
 800053a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053c:	2307      	movs	r3, #7
 800053e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000540:	2302      	movs	r3, #2
 8000542:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fe6d 	bl	800122c <HAL_RCC_OscConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000558:	f000 f96a 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055c:	230f      	movs	r3, #15
 800055e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	2303      	movs	r3, #3
 8000562:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000570:	463b      	mov	r3, r7
 8000572:	2104      	movs	r1, #4
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fa35 	bl	80019e4 <HAL_RCC_ClockConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000580:	f000 f956 	bl	8000830 <Error_Handler>
  }
}
 8000584:	bf00      	nop
 8000586:	3758      	adds	r7, #88	; 0x58
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b092      	sub	sp, #72	; 0x48
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80005a2:	2300      	movs	r3, #0
 80005a4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	222c      	movs	r2, #44	; 0x2c
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fa91 	bl	8003ad4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005b2:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <MX_RTC_Init+0x118>)
 80005b4:	4a3c      	ldr	r2, [pc, #240]	; (80006a8 <MX_RTC_Init+0x11c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005b8:	4b3a      	ldr	r3, [pc, #232]	; (80006a4 <MX_RTC_Init+0x118>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80005be:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <MX_RTC_Init+0x118>)
 80005c0:	227f      	movs	r2, #127	; 0x7f
 80005c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <MX_RTC_Init+0x118>)
 80005c6:	22ff      	movs	r2, #255	; 0xff
 80005c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005ca:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <MX_RTC_Init+0x118>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005d0:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <MX_RTC_Init+0x118>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <MX_RTC_Init+0x118>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <MX_RTC_Init+0x118>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005e2:	4830      	ldr	r0, [pc, #192]	; (80006a4 <MX_RTC_Init+0x118>)
 80005e4:	f002 f8de 	bl	80027a4 <HAL_RTC_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80005ee:	f000 f91f 	bl	8000830 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000608:	2300      	movs	r3, #0
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800060c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000610:	2201      	movs	r2, #1
 8000612:	4619      	mov	r1, r3
 8000614:	4823      	ldr	r0, [pc, #140]	; (80006a4 <MX_RTC_Init+0x118>)
 8000616:	f002 f940 	bl	800289a <HAL_RTC_SetTime>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000620:	f000 f906 	bl	8000830 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000624:	2301      	movs	r3, #1
 8000626:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800062a:	2301      	movs	r3, #1
 800062c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000630:	2301      	movs	r3, #1
 8000632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000636:	2300      	movs	r3, #0
 8000638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800063c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000640:	2201      	movs	r2, #1
 8000642:	4619      	mov	r1, r3
 8000644:	4817      	ldr	r0, [pc, #92]	; (80006a4 <MX_RTC_Init+0x118>)
 8000646:	f002 f9c5 	bl	80029d4 <HAL_RTC_SetDate>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000650:	f000 f8ee 	bl	8000830 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000654:	2300      	movs	r3, #0
 8000656:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000658:	2300      	movs	r3, #0
 800065a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x1;
 800065c:	2301      	movs	r3, #1
 800065e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS|RTC_ALARMMASK_MINUTES;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_RTC_Init+0x120>)
 800066e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000678:	2301      	movs	r3, #1
 800067a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800067e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2201      	movs	r2, #1
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_RTC_Init+0x118>)
 800068c:	f002 fa2a 	bl	8002ae4 <HAL_RTC_SetAlarm_IT>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8000696:	f000 f8cb 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	3748      	adds	r7, #72	; 0x48
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000028 	.word	0x20000028
 80006a8:	40002800 	.word	0x40002800
 80006ac:	80808000 	.word	0x80808000

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	f002 fd14 	bl	8003120 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f897 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000004c 	.word	0x2000004c
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a2a      	ldr	r2, [pc, #168]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a1e      	ldr	r2, [pc, #120]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a18      	ldr	r2, [pc, #96]	; (80007d4 <MX_GPIO_Init+0xc4>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2120      	movs	r1, #32
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 fcb7 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000798:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0xc8>)
 80007aa:	f000 faff 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007ae:	2320      	movs	r3, #32
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 faf0 	bl	8000dac <HAL_GPIO_Init>

}
 80007cc:	bf00      	nop
 80007ce:	3728      	adds	r7, #40	; 0x28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40021000 	.word	0x40021000
 80007d8:	48000800 	.word	0x48000800

080007dc <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  RTC_AlarmTypeDef sAlarm;
  HAL_RTC_GetAlarm(hrtc,&sAlarm,RTC_ALARM_A,FORMAT_BIN);
 80007e4:	f107 010c 	add.w	r1, r7, #12
 80007e8:	2300      	movs	r3, #0
 80007ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f002 fab4 	bl	8002d5c <HAL_RTC_GetAlarm>
  if(sAlarm.AlarmTime.Seconds>58) {
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	2b3a      	cmp	r3, #58	; 0x3a
 80007f8:	d902      	bls.n	8000800 <HAL_RTC_AlarmAEventCallback+0x24>
    sAlarm.AlarmTime.Seconds=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	73bb      	strb	r3, [r7, #14]
 80007fe:	e003      	b.n	8000808 <HAL_RTC_AlarmAEventCallback+0x2c>
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	3301      	adds	r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	73bb      	strb	r3, [r7, #14]
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}
 8000808:	bf00      	nop
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f002 f966 	bl	8002ae4 <HAL_RTC_SetAlarm_IT>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f5      	bne.n	800080a <HAL_RTC_AlarmAEventCallback+0x2e>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800081e:	2120      	movs	r1, #32
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 fc84 	bl	8001130 <HAL_GPIO_TogglePin>
}
 8000828:	bf00      	nop
 800082a:	3738      	adds	r7, #56	; 0x38
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x44>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6613      	str	r3, [r2, #96]	; 0x60
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x44>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6593      	str	r3, [r2, #88]	; 0x58
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b0a4      	sub	sp, #144	; 0x90
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	2288      	movs	r2, #136	; 0x88
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f003 f91d 	bl	8003ad4 <memset>
  if(hrtc->Instance==RTC)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_RTC_MspInit+0x6c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d120      	bne.n	80008e6 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 fab8 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008c2:	f7ff ffb5 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_RTC_MspInit+0x70>)
 80008c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008cc:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_RTC_MspInit+0x70>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2100      	movs	r1, #0
 80008da:	2029      	movs	r0, #41	; 0x29
 80008dc:	f000 fa2f 	bl	8000d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80008e0:	2029      	movs	r0, #41	; 0x29
 80008e2:	f000 fa48 	bl	8000d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3790      	adds	r7, #144	; 0x90
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40002800 	.word	0x40002800
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b0ac      	sub	sp, #176	; 0xb0
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2288      	movs	r2, #136	; 0x88
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f003 f8db 	bl	8003ad4 <memset>
  if(huart->Instance==USART2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <HAL_UART_MspInit+0xb0>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d13b      	bne.n	80009a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800092c:	2300      	movs	r3, #0
 800092e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4618      	mov	r0, r3
 8000936:	f001 fa79 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000940:	f7ff ff76 	bl	8000830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <HAL_UART_MspInit+0xb4>)
 8000946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000948:	4a18      	ldr	r2, [pc, #96]	; (80009ac <HAL_UART_MspInit+0xb4>)
 800094a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094e:	6593      	str	r3, [r2, #88]	; 0x58
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_UART_MspInit+0xb4>)
 8000952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <HAL_UART_MspInit+0xb4>)
 800095e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000960:	4a12      	ldr	r2, [pc, #72]	; (80009ac <HAL_UART_MspInit+0xb4>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000968:	4b10      	ldr	r3, [pc, #64]	; (80009ac <HAL_UART_MspInit+0xb4>)
 800096a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000974:	230c      	movs	r3, #12
 8000976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fa06 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009a0:	bf00      	nop
 80009a2:	37b0      	adds	r7, #176	; 0xb0
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40004400 	.word	0x40004400
 80009ac:	40021000 	.word	0x40021000

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <NMI_Handler+0x4>

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f8a4 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000a08:	4802      	ldr	r0, [pc, #8]	; (8000a14 <RTC_Alarm_IRQHandler+0x10>)
 8000a0a:	f002 fa67 	bl	8002edc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	20000028 	.word	0x20000028

08000a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SystemInit+0x20>)
 8000a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SystemInit+0x20>)
 8000a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a74 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a40:	f7ff ffea 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a46:	490d      	ldr	r1, [pc, #52]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a48:	4a0d      	ldr	r2, [pc, #52]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a4c:	e002      	b.n	8000a54 <LoopCopyDataInit>

08000a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a52:	3304      	adds	r3, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a58:	d3f9      	bcc.n	8000a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a5c:	4c0a      	ldr	r4, [pc, #40]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a60:	e001      	b.n	8000a66 <LoopFillZerobss>

08000a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a64:	3204      	adds	r2, #4

08000a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a68:	d3fb      	bcc.n	8000a62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f003 f80f 	bl	8003a8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fd2d 	bl	80004cc <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a80:	08003b54 	.word	0x08003b54
  ldr r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a88:	200000d4 	.word	0x200000d4

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_Init+0x3c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a0b      	ldr	r2, [pc, #44]	; (8000acc <HAL_Init+0x3c>)
 8000aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	f000 f93e 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 f80f 	bl	8000ad0 <HAL_InitTick>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d002      	beq.n	8000abe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	71fb      	strb	r3, [r7, #7]
 8000abc:	e001      	b.n	8000ac2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000abe:	f7ff febd 	bl	800083c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40022000 	.word	0x40022000

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_InitTick+0x6c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d023      	beq.n	8000b2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_InitTick+0x70>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <HAL_InitTick+0x6c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f949 	bl	8000d92 <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10f      	bne.n	8000b26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d809      	bhi.n	8000b20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f913 	bl	8000d3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0x74>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e007      	b.n	8000b30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e004      	b.n	8000b30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
 8000b2a:	e001      	b.n	8000b30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	200000d0 	.word	0x200000d0

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	200000d0 	.word	0x200000d0

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	; (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	; (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	; (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	; 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff29 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff3e 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff31 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffa2 	bl	8000ce4 <SysTick_Config>
 8000da0:	4603      	mov	r3, r0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dba:	e17f      	b.n	80010bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f000 8171 	beq.w	80010b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d005      	beq.n	8000dec <HAL_GPIO_Init+0x40>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d118      	bne.n	8000e8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	6939      	ldr	r1, [r7, #16]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80ac 	beq.w	80010b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a5e      	ldr	r2, [pc, #376]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b5c      	ldr	r3, [pc, #368]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f76:	4a5a      	ldr	r2, [pc, #360]	; (80010e0 <HAL_GPIO_Init+0x334>)
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x242>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4f      	ldr	r2, [pc, #316]	; (80010e4 <HAL_GPIO_Init+0x338>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x23e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4e      	ldr	r2, [pc, #312]	; (80010e8 <HAL_GPIO_Init+0x33c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x23a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4d      	ldr	r2, [pc, #308]	; (80010ec <HAL_GPIO_Init+0x340>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x236>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4c      	ldr	r2, [pc, #304]	; (80010f0 <HAL_GPIO_Init+0x344>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x232>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4b      	ldr	r2, [pc, #300]	; (80010f4 <HAL_GPIO_Init+0x348>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x22e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_GPIO_Init+0x34c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x22a>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00c      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00a      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x244>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001000:	4937      	ldr	r1, [pc, #220]	; (80010e0 <HAL_GPIO_Init+0x334>)
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001032:	4a32      	ldr	r2, [pc, #200]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <HAL_GPIO_Init+0x350>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	43db      	mvns	r3, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4013      	ands	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800105c:	4a27      	ldr	r2, [pc, #156]	; (80010fc <HAL_GPIO_Init+0x350>)
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <HAL_GPIO_Init+0x350>)
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_GPIO_Init+0x350>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010b0:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_GPIO_Init+0x350>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	3301      	adds	r3, #1
 80010ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f47f ae78 	bne.w	8000dbc <HAL_GPIO_Init+0x10>
  }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	371c      	adds	r7, #28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	48000400 	.word	0x48000400
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00
 80010f0:	48001000 	.word	0x48001000
 80010f4:	48001400 	.word	0x48001400
 80010f8:	48001800 	.word	0x48001800
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800111c:	e002      	b.n	8001124 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800111e:	887a      	ldrh	r2, [r7, #2]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	041a      	lsls	r2, r3, #16
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43d9      	mvns	r1, r3
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	400b      	ands	r3, r1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <HAL_PWREx_GetVoltageRange+0x18>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40007000 	.word	0x40007000

08001180 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118e:	d130      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119c:	d038      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011a6:	4a1e      	ldr	r2, [pc, #120]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2232      	movs	r2, #50	; 0x32
 80011b4:	fb02 f303 	mul.w	r3, r2, r3
 80011b8:	4a1b      	ldr	r2, [pc, #108]	; (8001228 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9b      	lsrs	r3, r3, #18
 80011c0:	3301      	adds	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	e002      	b.n	80011cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ce:	695b      	ldr	r3, [r3, #20]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d8:	d102      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f2      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011e0:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ec:	d110      	bne.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e00f      	b.n	8001212 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011fe:	d007      	beq.n	8001210 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40007000 	.word	0x40007000
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e3ca      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800123e:	4b97      	ldr	r3, [pc, #604]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001248:	4b94      	ldr	r3, [pc, #592]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80e4 	beq.w	8001428 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_RCC_OscConfig+0x4a>
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b0c      	cmp	r3, #12
 800126a:	f040 808b 	bne.w	8001384 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b01      	cmp	r3, #1
 8001272:	f040 8087 	bne.w	8001384 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001276:	4b89      	ldr	r3, [pc, #548]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e3a2      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	4b82      	ldr	r3, [pc, #520]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	2b00      	cmp	r3, #0
 800129c:	d004      	beq.n	80012a8 <HAL_RCC_OscConfig+0x7c>
 800129e:	4b7f      	ldr	r3, [pc, #508]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a6:	e005      	b.n	80012b4 <HAL_RCC_OscConfig+0x88>
 80012a8:	4b7c      	ldr	r3, [pc, #496]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d223      	bcs.n	8001300 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fd55 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e383      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012cc:	4b73      	ldr	r3, [pc, #460]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a72      	ldr	r2, [pc, #456]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b70      	ldr	r3, [pc, #448]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	496d      	ldr	r1, [pc, #436]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012ea:	4b6c      	ldr	r3, [pc, #432]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	4968      	ldr	r1, [pc, #416]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
 80012fe:	e025      	b.n	800134c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001300:	4b66      	ldr	r3, [pc, #408]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a65      	ldr	r2, [pc, #404]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4960      	ldr	r1, [pc, #384]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	495b      	ldr	r1, [pc, #364]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fd15 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e343      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800134c:	f000 fc4a 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001350:	4602      	mov	r2, r0
 8001352:	4b52      	ldr	r3, [pc, #328]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	4950      	ldr	r1, [pc, #320]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 800135e:	5ccb      	ldrb	r3, [r1, r3]
 8001360:	f003 031f 	and.w	r3, r3, #31
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
 800136a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <HAL_RCC_OscConfig+0x27c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fbad 	bl	8000ad0 <HAL_InitTick>
 8001376:	4603      	mov	r3, r0
 8001378:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d052      	beq.n	8001426 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	e327      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d032      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a42      	ldr	r2, [pc, #264]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001398:	f7ff fbea 	bl	8000b70 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbe6 	bl	8000b70 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e310      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013b2:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a36      	ldr	r2, [pc, #216]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013c4:	f043 0308 	orr.w	r3, r3, #8
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4931      	ldr	r1, [pc, #196]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	492c      	ldr	r1, [pc, #176]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
 80013f0:	e01a      	b.n	8001428 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a29      	ldr	r2, [pc, #164]	; (800149c <HAL_RCC_OscConfig+0x270>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013fe:	f7ff fbb7 	bl	8000b70 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001406:	f7ff fbb3 	bl	8000b70 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e2dd      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001418:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f0      	bne.n	8001406 <HAL_RCC_OscConfig+0x1da>
 8001424:	e000      	b.n	8001428 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001426:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d074      	beq.n	800151e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b08      	cmp	r3, #8
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x21a>
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	d10e      	bne.n	800145e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d064      	beq.n	800151c <HAL_RCC_OscConfig+0x2f0>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d160      	bne.n	800151c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e2ba      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x24a>
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e026      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800147e:	d115      	bne.n	80014ac <HAL_RCC_OscConfig+0x280>
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a05      	ldr	r2, [pc, #20]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_RCC_OscConfig+0x270>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e014      	b.n	80014c4 <HAL_RCC_OscConfig+0x298>
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	08003afc 	.word	0x08003afc
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000004 	.word	0x20000004
 80014ac:	4ba0      	ldr	r3, [pc, #640]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a9f      	ldr	r2, [pc, #636]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	4b9d      	ldr	r3, [pc, #628]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9c      	ldr	r2, [pc, #624]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d013      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb50 	bl	8000b70 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fb4c 	bl	8000b70 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e276      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x2a8>
 80014f2:	e014      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb3c 	bl	8000b70 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb38 	bl	8000b70 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e262      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800150e:	4b88      	ldr	r3, [pc, #544]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x2d0>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d060      	beq.n	80015ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d005      	beq.n	800153c <HAL_RCC_OscConfig+0x310>
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	d119      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d116      	bne.n	800156a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x328>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e23f      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	4973      	ldr	r1, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	e040      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d023      	beq.n	80015ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001572:	4b6f      	ldr	r3, [pc, #444]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a6e      	ldr	r2, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff faf7 	bl	8000b70 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff faf3 	bl	8000b70 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e21d      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	061b      	lsls	r3, r3, #24
 80015b2:	495f      	ldr	r1, [pc, #380]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
 80015b8:	e018      	b.n	80015ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b5d      	ldr	r3, [pc, #372]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5c      	ldr	r2, [pc, #368]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c6:	f7ff fad3 	bl	8000b70 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ce:	f7ff facf 	bl	8000b70 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e1f9      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f0      	bne.n	80015ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d03c      	beq.n	8001672 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d01c      	beq.n	800163a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001600:	4b4b      	ldr	r3, [pc, #300]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001606:	4a4a      	ldr	r2, [pc, #296]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001610:	f7ff faae 	bl	8000b70 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff faaa 	bl	8000b70 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e1d4      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800162c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ef      	beq.n	8001618 <HAL_RCC_OscConfig+0x3ec>
 8001638:	e01b      	b.n	8001672 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800163c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001640:	4a3b      	ldr	r2, [pc, #236]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fa91 	bl	8000b70 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fa8d 	bl	8000b70 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e1b7      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ef      	bne.n	8001652 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80a6 	beq.w	80017cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001684:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10d      	bne.n	80016ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001694:	4a26      	ldr	r2, [pc, #152]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d118      	bne.n	80016ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa54 	bl	8000b70 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016cc:	f7ff fa50 	bl	8000b70 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e17a      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_RCC_OscConfig+0x508>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d108      	bne.n	8001704 <HAL_RCC_OscConfig+0x4d8>
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80016f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d115      	bne.n	8001738 <HAL_RCC_OscConfig+0x50c>
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001714:	f043 0304 	orr.w	r3, r3, #4
 8001718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001722:	4a03      	ldr	r2, [pc, #12]	; (8001730 <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x52c>
 800172e:	bf00      	nop
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	4b9c      	ldr	r3, [pc, #624]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a9b      	ldr	r2, [pc, #620]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001748:	4b98      	ldr	r3, [pc, #608]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	4a97      	ldr	r2, [pc, #604]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d016      	beq.n	800178e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fa06 	bl	8000b70 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fa02 	bl	8000b70 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	; 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e12a      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177e:	4b8b      	ldr	r3, [pc, #556]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ed      	beq.n	8001768 <HAL_RCC_OscConfig+0x53c>
 800178c:	e015      	b.n	80017ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff f9ef 	bl	8000b70 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff f9eb 	bl	8000b70 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e113      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ac:	4b7f      	ldr	r3, [pc, #508]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ed      	bne.n	8001796 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d105      	bne.n	80017cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c0:	4b7a      	ldr	r3, [pc, #488]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c4:	4a79      	ldr	r2, [pc, #484]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80017c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ca:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f000 80fe 	beq.w	80019d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	2b02      	cmp	r3, #2
 80017dc:	f040 80d0 	bne.w	8001980 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017e0:	4b72      	ldr	r3, [pc, #456]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0203 	and.w	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d130      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	3b01      	subs	r3, #1
 8001800:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	429a      	cmp	r2, r3
 8001804:	d127      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001810:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d11f      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001820:	2a07      	cmp	r2, #7
 8001822:	bf14      	ite	ne
 8001824:	2201      	movne	r2, #1
 8001826:	2200      	moveq	r2, #0
 8001828:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182a:	4293      	cmp	r3, r2
 800182c:	d113      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d109      	bne.n	8001856 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001852:	429a      	cmp	r2, r3
 8001854:	d06e      	beq.n	8001934 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b0c      	cmp	r3, #12
 800185a:	d069      	beq.n	8001930 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800185c:	4b53      	ldr	r3, [pc, #332]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001868:	4b50      	ldr	r3, [pc, #320]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0ad      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001878:	4b4c      	ldr	r3, [pc, #304]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800187e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001884:	f7ff f974 	bl	8000b70 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f970 	bl	8000b70 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e09a      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <HAL_RCC_OscConfig+0x784>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018ba:	3a01      	subs	r2, #1
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	4311      	orrs	r1, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018c4:	0212      	lsls	r2, r2, #8
 80018c6:	4311      	orrs	r1, r2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018cc:	0852      	lsrs	r2, r2, #1
 80018ce:	3a01      	subs	r2, #1
 80018d0:	0552      	lsls	r2, r2, #21
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018d8:	0852      	lsrs	r2, r2, #1
 80018da:	3a01      	subs	r2, #1
 80018dc:	0652      	lsls	r2, r2, #25
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e4:	0912      	lsrs	r2, r2, #4
 80018e6:	0452      	lsls	r2, r2, #17
 80018e8:	430a      	orrs	r2, r1
 80018ea:	4930      	ldr	r1, [pc, #192]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001908:	f7ff f932 	bl	8000b70 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f92e 	bl	8000b70 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e058      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192e:	e050      	b.n	80019d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e04f      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d148      	bne.n	80019d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001956:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001958:	f7ff f90a 	bl	8000b70 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001960:	f7ff f906 	bl	8000b70 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e030      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x734>
 800197e:	e028      	b.n	80019d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d023      	beq.n	80019ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a08      	ldr	r2, [pc, #32]	; (80019ac <HAL_RCC_OscConfig+0x780>)
 800198c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f8ed 	bl	8000b70 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001998:	e00c      	b.n	80019b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff f8e9 	bl	8000b70 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d905      	bls.n	80019b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
 80019ac:	40021000 	.word	0x40021000
 80019b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_RCC_OscConfig+0x7b0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ec      	bne.n	800199a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4905      	ldr	r1, [pc, #20]	; (80019dc <HAL_RCC_OscConfig+0x7b0>)
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_OscConfig+0x7b4>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e001      	b.n	80019d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	feeefffc 	.word	0xfeeefffc

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0e7      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b75      	ldr	r3, [pc, #468]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d910      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4970      	ldr	r1, [pc, #448]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0cf      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d908      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b63      	ldr	r3, [pc, #396]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4960      	ldr	r1, [pc, #384]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d04c      	beq.n	8001afc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d121      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0a6      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a82:	4b54      	ldr	r3, [pc, #336]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e09a      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e08e      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e086      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4943      	ldr	r1, [pc, #268]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001acc:	f7ff f850 	bl	8000b70 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f84c 	bl	8000b70 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e06e      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d208      	bcs.n	8001b2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	492b      	ldr	r1, [pc, #172]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d210      	bcs.n	8001b5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0207 	bic.w	r2, r3, #7
 8001b40:	4923      	ldr	r1, [pc, #140]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b48:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e036      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4918      	ldr	r1, [pc, #96]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4910      	ldr	r1, [pc, #64]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 f824 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	490b      	ldr	r1, [pc, #44]	; (8001bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_ClockConfig+0x1fc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ff87 	bl	8000ad0 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08003afc 	.word	0x08003afc
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d11e      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c18:	4b34      	ldr	r3, [pc, #208]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c24:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e005      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10d      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e004      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d134      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d003      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0xac>
 8001c88:	e005      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c8c:	617b      	str	r3, [r7, #20]
      break;
 8001c8e:	e005      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c92:	617b      	str	r3, [r7, #20]
      break;
 8001c94:	e002      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	617b      	str	r3, [r7, #20]
      break;
 8001c9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	fb03 f202 	mul.w	r2, r3, r2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0e5b      	lsrs	r3, r3, #25
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08003b14 	.word	0x08003b14
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	; (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4904      	ldr	r1, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003b0c 	.word	0x08003b0c

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d44:	f7ff ffda 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0adb      	lsrs	r3, r3, #11
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003b0c 	.word	0x08003b0c

08001d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d84:	f7ff f9ee 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001d88:	6178      	str	r0, [r7, #20]
 8001d8a:	e014      	b.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4a24      	ldr	r2, [pc, #144]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	; 0x58
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da4:	f7ff f9de 	bl	8001164 <HAL_PWREx_GetVoltageRange>
 8001da8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dbc:	d10b      	bne.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	; 0x80
 8001dc2:	d919      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2ba0      	cmp	r3, #160	; 0xa0
 8001dc8:	d902      	bls.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e013      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e010      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d902      	bls.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ddc:	2303      	movs	r3, #3
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e00a      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	; 0x80
 8001de6:	d102      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e004      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b70      	cmp	r3, #112	; 0x70
 8001df2:	d101      	bne.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	4909      	ldr	r1, [pc, #36]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e08:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e34:	2300      	movs	r3, #0
 8001e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d041      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e50:	d02a      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e52:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e56:	d824      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e5c:	d008      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e62:	d81e      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00a      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e70:	4b86      	ldr	r3, [pc, #536]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a85      	ldr	r2, [pc, #532]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e7c:	e015      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fabb 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e8e:	e00c      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3320      	adds	r3, #32
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fba6 	bl	80025e8 <RCCEx_PLLSAI2_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ea0:	e003      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea6:	e000      	b.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eaa:	7cfb      	ldrb	r3, [r7, #19]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eb0:	4b76      	ldr	r3, [pc, #472]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ebe:	4973      	ldr	r1, [pc, #460]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ec6:	e001      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec8:	7cfb      	ldrb	r3, [r7, #19]
 8001eca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d041      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee0:	d02a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ee2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ee6:	d824      	bhi.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ee8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001eec:	d008      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef2:	d81e      	bhi.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00a      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001efc:	d010      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001efe:	e018      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4a61      	ldr	r2, [pc, #388]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f0c:	e015      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fa73 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f1e:	e00c      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	3320      	adds	r3, #32
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fb5e 	bl	80025e8 <RCCEx_PLLSAI2_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f30:	e003      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	74fb      	strb	r3, [r7, #19]
      break;
 8001f36:	e000      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f3a:	7cfb      	ldrb	r3, [r7, #19]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f40:	4b52      	ldr	r3, [pc, #328]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4e:	494f      	ldr	r1, [pc, #316]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f56:	e001      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a0 	beq.w	80020aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00d      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	4a40      	ldr	r2, [pc, #256]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f90:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa0:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3a      	ldr	r2, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fac:	f7fe fde0 	bl	8000b70 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb4:	f7fe fddc 	bl	8000b70 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d902      	bls.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	74fb      	strb	r3, [r7, #19]
        break;
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fc8:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d15c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fda:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d019      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002002:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	4a20      	ldr	r2, [pc, #128]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002024:	4a19      	ldr	r2, [pc, #100]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d016      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe fd9b 	bl	8000b70 <HAL_GetTick>
 800203a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203c:	e00b      	b.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fd97 	bl	8000b70 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	; 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d902      	bls.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	74fb      	strb	r3, [r7, #19]
            break;
 8002054:	e006      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ec      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207a:	4904      	ldr	r1, [pc, #16]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002082:	e009      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002084:	7cfb      	ldrb	r3, [r7, #19]
 8002086:	74bb      	strb	r3, [r7, #18]
 8002088:	e006      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002098:	7c7b      	ldrb	r3, [r7, #17]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d105      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800209e:	4b9e      	ldr	r3, [pc, #632]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	4a9d      	ldr	r2, [pc, #628]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00a      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b6:	4b98      	ldr	r3, [pc, #608]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f023 0203 	bic.w	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c4:	4994      	ldr	r1, [pc, #592]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00a      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020d8:	4b8f      	ldr	r3, [pc, #572]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f023 020c 	bic.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	498c      	ldr	r1, [pc, #560]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fa:	4b87      	ldr	r3, [pc, #540]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002100:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	4983      	ldr	r1, [pc, #524]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00a      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800211c:	4b7e      	ldr	r3, [pc, #504]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002122:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	497b      	ldr	r1, [pc, #492]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212c:	4313      	orrs	r3, r2
 800212e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800213e:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	4972      	ldr	r1, [pc, #456]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	496a      	ldr	r1, [pc, #424]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	4961      	ldr	r1, [pc, #388]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b2:	4959      	ldr	r1, [pc, #356]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021c6:	4b54      	ldr	r3, [pc, #336]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021d4:	4950      	ldr	r1, [pc, #320]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f6:	4948      	ldr	r1, [pc, #288]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	493f      	ldr	r1, [pc, #252]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d028      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800222c:	4b3a      	ldr	r3, [pc, #232]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223a:	4937      	ldr	r1, [pc, #220]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224a:	d106      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a31      	ldr	r2, [pc, #196]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
 8002258:	e011      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002262:	d10c      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f8c8 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d028      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	491f      	ldr	r1, [pc, #124]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b4:	60d3      	str	r3, [r2, #12]
 80022b6:	e011      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f899 	bl	8002400 <RCCEx_PLLSAI1_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02b      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	4908      	ldr	r1, [pc, #32]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002306:	d109      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002308:	4b03      	ldr	r3, [pc, #12]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a02      	ldr	r2, [pc, #8]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002312:	60d3      	str	r3, [r2, #12]
 8002314:	e014      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002316:	bf00      	nop
 8002318:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3304      	adds	r3, #4
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f867 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02f      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800234c:	4b2b      	ldr	r3, [pc, #172]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800235a:	4928      	ldr	r1, [pc, #160]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800236a:	d10d      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3304      	adds	r3, #4
 8002370:	2102      	movs	r1, #2
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f844 	bl	8002400 <RCCEx_PLLSAI1_Config>
 8002378:	4603      	mov	r3, r0
 800237a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d014      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002382:	7cfb      	ldrb	r3, [r7, #19]
 8002384:	74bb      	strb	r3, [r7, #18]
 8002386:	e011      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800238c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002390:	d10c      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3320      	adds	r3, #32
 8002396:	2102      	movs	r1, #2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f925 	bl	80025e8 <RCCEx_PLLSAI2_Config>
 800239e:	4603      	mov	r3, r0
 80023a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023a2:	7cfb      	ldrb	r3, [r7, #19]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023a8:	7cfb      	ldrb	r3, [r7, #19]
 80023aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023b8:	4b10      	ldr	r3, [pc, #64]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c6:	490d      	ldr	r1, [pc, #52]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00b      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ea:	4904      	ldr	r1, [pc, #16]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000

08002400 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800240a:	2300      	movs	r3, #0
 800240c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800240e:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d018      	beq.n	800244c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800241a:	4b72      	ldr	r3, [pc, #456]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d10d      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
       ||
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	091b      	lsrs	r3, r3, #4
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
       ||
 8002442:	429a      	cmp	r2, r3
 8002444:	d047      	beq.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e044      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b03      	cmp	r3, #3
 8002452:	d018      	beq.n	8002486 <RCCEx_PLLSAI1_Config+0x86>
 8002454:	2b03      	cmp	r3, #3
 8002456:	d825      	bhi.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002458:	2b01      	cmp	r3, #1
 800245a:	d002      	beq.n	8002462 <RCCEx_PLLSAI1_Config+0x62>
 800245c:	2b02      	cmp	r3, #2
 800245e:	d009      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x74>
 8002460:	e020      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002462:	4b60      	ldr	r3, [pc, #384]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d11d      	bne.n	80024aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002472:	e01a      	b.n	80024aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002474:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d116      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e013      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10f      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d109      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024a2:	e006      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      break;
 80024a8:	e004      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024aa:	bf00      	nop
 80024ac:	e002      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ae:	bf00      	nop
 80024b0:	e000      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10d      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	430b      	orrs	r3, r1
 80024d0:	4944      	ldr	r1, [pc, #272]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d17d      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024dc:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a40      	ldr	r2, [pc, #256]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7fe fb42 	bl	8000b70 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ee:	e009      	b.n	8002504 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024f0:	f7fe fb3e 	bl	8000b70 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d902      	bls.n	8002504 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	73fb      	strb	r3, [r7, #15]
        break;
 8002502:	e005      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ef      	bne.n	80024f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d160      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d111      	bne.n	8002540 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251c:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6892      	ldr	r2, [r2, #8]
 800252c:	0211      	lsls	r1, r2, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	0912      	lsrs	r2, r2, #4
 8002534:	0452      	lsls	r2, r2, #17
 8002536:	430a      	orrs	r2, r1
 8002538:	492a      	ldr	r1, [pc, #168]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	610b      	str	r3, [r1, #16]
 800253e:	e027      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d112      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002546:	4b27      	ldr	r3, [pc, #156]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800254e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6892      	ldr	r2, [r2, #8]
 8002556:	0211      	lsls	r1, r2, #8
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6912      	ldr	r2, [r2, #16]
 800255c:	0852      	lsrs	r2, r2, #1
 800255e:	3a01      	subs	r2, #1
 8002560:	0552      	lsls	r2, r2, #21
 8002562:	430a      	orrs	r2, r1
 8002564:	491f      	ldr	r1, [pc, #124]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002566:	4313      	orrs	r3, r2
 8002568:	610b      	str	r3, [r1, #16]
 800256a:	e011      	b.n	8002590 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6952      	ldr	r2, [r2, #20]
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0652      	lsls	r2, r2, #25
 8002588:	430a      	orrs	r2, r1
 800258a:	4916      	ldr	r1, [pc, #88]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002590:	4b14      	ldr	r3, [pc, #80]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a13      	ldr	r2, [pc, #76]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800259a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fae8 	bl	8000b70 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025a2:	e009      	b.n	80025b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025a4:	f7fe fae4 	bl	8000b70 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d902      	bls.n	80025b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	73fb      	strb	r3, [r7, #15]
          break;
 80025b6:	e005      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b8:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0ef      	beq.n	80025a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	4904      	ldr	r1, [pc, #16]	; (80025e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000

080025e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025f2:	2300      	movs	r3, #0
 80025f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025f6:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d018      	beq.n	8002634 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d10d      	bne.n	800262e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
       ||
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800261a:	4b61      	ldr	r3, [pc, #388]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	1c5a      	adds	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
       ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d047      	beq.n	80026be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 8002632:	e044      	b.n	80026be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d018      	beq.n	800266e <RCCEx_PLLSAI2_Config+0x86>
 800263c:	2b03      	cmp	r3, #3
 800263e:	d825      	bhi.n	800268c <RCCEx_PLLSAI2_Config+0xa4>
 8002640:	2b01      	cmp	r3, #1
 8002642:	d002      	beq.n	800264a <RCCEx_PLLSAI2_Config+0x62>
 8002644:	2b02      	cmp	r3, #2
 8002646:	d009      	beq.n	800265c <RCCEx_PLLSAI2_Config+0x74>
 8002648:	e020      	b.n	800268c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800264a:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11d      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265a:	e01a      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	2b00      	cmp	r3, #0
 8002666:	d116      	bne.n	8002696 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800266c:	e013      	b.n	8002696 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800266e:	4b4c      	ldr	r3, [pc, #304]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10f      	bne.n	800269a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800267a:	4b49      	ldr	r3, [pc, #292]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800268a:	e006      	b.n	800269a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	73fb      	strb	r3, [r7, #15]
      break;
 8002690:	e004      	b.n	800269c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002692:	bf00      	nop
 8002694:	e002      	b.n	800269c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002696:	bf00      	nop
 8002698:	e000      	b.n	800269c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269a:	bf00      	nop
    }

    if(status == HAL_OK)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026a2:	4b3f      	ldr	r3, [pc, #252]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6819      	ldr	r1, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	430b      	orrs	r3, r1
 80026b8:	4939      	ldr	r1, [pc, #228]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d167      	bne.n	8002794 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026c4:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a35      	ldr	r2, [pc, #212]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d0:	f7fe fa4e 	bl	8000b70 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026d6:	e009      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026d8:	f7fe fa4a 	bl	8000b70 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ea:	e005      	b.n	80026f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ef      	bne.n	80026d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14a      	bne.n	8002794 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d111      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002704:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	6892      	ldr	r2, [r2, #8]
 8002714:	0211      	lsls	r1, r2, #8
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68d2      	ldr	r2, [r2, #12]
 800271a:	0912      	lsrs	r2, r2, #4
 800271c:	0452      	lsls	r2, r2, #17
 800271e:	430a      	orrs	r2, r1
 8002720:	491f      	ldr	r1, [pc, #124]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002722:	4313      	orrs	r3, r2
 8002724:	614b      	str	r3, [r1, #20]
 8002726:	e011      	b.n	800274c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6892      	ldr	r2, [r2, #8]
 8002738:	0211      	lsls	r1, r2, #8
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	0852      	lsrs	r2, r2, #1
 8002740:	3a01      	subs	r2, #1
 8002742:	0652      	lsls	r2, r2, #25
 8002744:	430a      	orrs	r2, r1
 8002746:	4916      	ldr	r1, [pc, #88]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a13      	ldr	r2, [pc, #76]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe fa0a 	bl	8000b70 <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800275e:	e009      	b.n	8002774 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002760:	f7fe fa06 	bl	8000b70 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	73fb      	strb	r3, [r7, #15]
          break;
 8002772:	e005      	b.n	8002780 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	4904      	ldr	r1, [pc, #16]	; (80027a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002790:	4313      	orrs	r3, r2
 8002792:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000

080027a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d06c      	beq.n	8002890 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe f85a 	bl	8000884 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2202      	movs	r2, #2
 80027d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	22ca      	movs	r2, #202	; 0xca
 80027de:	625a      	str	r2, [r3, #36]	; 0x24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2253      	movs	r2, #83	; 0x53
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fbe3 	bl	8002fb4 <RTC_EnterInitMode>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d14b      	bne.n	8002890 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6899      	ldr	r1, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	431a      	orrs	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6919      	ldr	r1, [r3, #16]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	041a      	lsls	r2, r3, #16
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fbe7 	bl	800301c <RTC_ExitInitMode>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11b      	bne.n	8002890 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0203 	bic.w	r2, r2, #3
 8002866:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	22ff      	movs	r2, #255	; 0xff
 8002886:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8002890:	7bfb      	ldrb	r3, [r7, #15]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800289a:	b590      	push	{r4, r7, lr}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_RTC_SetTime+0x1a>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e08b      	b.n	80029cc <HAL_RTC_SetTime+0x132>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ca      	movs	r2, #202	; 0xca
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2253      	movs	r2, #83	; 0x53
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fb6d 	bl	8002fb4 <RTC_EnterInitMode>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d163      	bne.n	80029ac <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d126      	bne.n	8002938 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fbc8 	bl	8003098 <RTC_ByteToBcd2>
 8002908:	4603      	mov	r3, r0
 800290a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	785b      	ldrb	r3, [r3, #1]
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fbc1 	bl	8003098 <RTC_ByteToBcd2>
 8002916:	4603      	mov	r3, r0
 8002918:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800291a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	789b      	ldrb	r3, [r3, #2]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fbb9 	bl	8003098 <RTC_ByteToBcd2>
 8002926:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002928:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e018      	b.n	800296a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2200      	movs	r2, #0
 800294a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	785b      	ldrb	r3, [r3, #1]
 8002956:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002958:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800295e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	78db      	ldrb	r3, [r3, #3]
 8002964:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002966:	4313      	orrs	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002974:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002978:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6899      	ldr	r1, [r3, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	431a      	orrs	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fb3a 	bl	800301c <RTC_ExitInitMode>
 80029a8:	4603      	mov	r3, r0
 80029aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	22ff      	movs	r2, #255	; 0xff
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80029b4:	7cfb      	ldrb	r3, [r7, #19]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d103      	bne.n	80029c2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	371c      	adds	r7, #28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}

080029d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_RTC_SetDate+0x1a>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e075      	b.n	8002ada <HAL_RTC_SetDate+0x106>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10e      	bne.n	8002a22 <HAL_RTC_SetDate+0x4e>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	785b      	ldrb	r3, [r3, #1]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	785b      	ldrb	r3, [r3, #1]
 8002a14:	f023 0310 	bic.w	r3, r3, #16
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	330a      	adds	r3, #10
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11c      	bne.n	8002a62 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	78db      	ldrb	r3, [r3, #3]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 fb33 	bl	8003098 <RTC_ByteToBcd2>
 8002a32:	4603      	mov	r3, r0
 8002a34:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	785b      	ldrb	r3, [r3, #1]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fb2c 	bl	8003098 <RTC_ByteToBcd2>
 8002a40:	4603      	mov	r3, r0
 8002a42:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a44:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	789b      	ldrb	r3, [r3, #2]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb24 	bl	8003098 <RTC_ByteToBcd2>
 8002a50:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a52:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e00e      	b.n	8002a80 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	78db      	ldrb	r3, [r3, #3]
 8002a66:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a6e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a74:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	22ca      	movs	r2, #202	; 0xca
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2253      	movs	r2, #83	; 0x53
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fa8f 	bl	8002fb4 <RTC_EnterInitMode>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002aaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002aae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fab3 	bl	800301c <RTC_ExitInitMode>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	22ff      	movs	r2, #255	; 0xff
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ac2:	7cfb      	ldrb	r3, [r7, #19]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd90      	pop	{r4, r7, pc}
	...

08002ae4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b089      	sub	sp, #36	; 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_RTC_SetAlarm_IT+0x1a>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e127      	b.n	8002d4e <HAL_RTC_SetAlarm_IT+0x26a>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d137      	bne.n	8002b84 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d102      	bne.n	8002b28 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fab3 	bl	8003098 <RTC_ByteToBcd2>
 8002b32:	4603      	mov	r3, r0
 8002b34:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	785b      	ldrb	r3, [r3, #1]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 faac 	bl	8003098 <RTC_ByteToBcd2>
 8002b40:	4603      	mov	r3, r0
 8002b42:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b44:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	789b      	ldrb	r3, [r3, #2]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 faa4 	bl	8003098 <RTC_ByteToBcd2>
 8002b50:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b52:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002b5c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b66:	4618      	mov	r0, r3
 8002b68:	f000 fa96 	bl	8003098 <RTC_ByteToBcd2>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002b70:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002b78:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	e023      	b.n	8002bcc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d102      	bne.n	8002b98 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2200      	movs	r2, #0
 8002b96:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	785b      	ldrb	r3, [r3, #1]
 8002ba2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002ba4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002baa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	78db      	ldrb	r3, [r3, #3]
 8002bb0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002bb2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002bbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002bc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	22ca      	movs	r2, #202	; 0xca
 8002bde:	625a      	str	r2, [r3, #36]	; 0x24
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2253      	movs	r2, #83	; 0x53
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf0:	d14a      	bne.n	8002c88 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c00:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002c12:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8002c14:	f7fd ffac 	bl	8000b70 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c1a:	e015      	b.n	8002c48 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c1c:	f7fd ffa8 	bl	8000b70 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c2a:	d90d      	bls.n	8002c48 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2203      	movs	r2, #3
 8002c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e082      	b.n	8002d4e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0e2      	beq.n	8002c1c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c74:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	e049      	b.n	8002d1c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c96:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ca8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8002caa:	f7fd ff61 	bl	8000b70 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002cb0:	e015      	b.n	8002cde <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb2:	f7fd ff5d 	bl	8000b70 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc0:	d90d      	bls.n	8002cde <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ff      	movs	r2, #255	; 0xff
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2203      	movs	r2, #3
 8002cce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e037      	b.n	8002d4e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0e2      	beq.n	8002cb2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d1a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <HAL_RTC_SetAlarm_IT+0x274>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0d      	ldr	r2, [pc, #52]	; (8002d58 <HAL_RTC_SetAlarm_IT+0x274>)
 8002d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_RTC_SetAlarm_IT+0x274>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_RTC_SetAlarm_IT+0x274>)
 8002d2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d32:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	22ff      	movs	r2, #255	; 0xff
 8002d3a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3724      	adds	r7, #36	; 0x24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd90      	pop	{r4, r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d143      	bne.n	8002dfa <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002d8c:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	0d9b      	lsrs	r3, r3, #22
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	0e1b      	lsrs	r3, r3, #24
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	615a      	str	r2, [r3, #20]
 8002df8:	e042      	b.n	8002e80 <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28

    tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e14:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	0d9b      	lsrs	r3, r3, #22
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	0e1b      	lsrs	r3, r3, #24
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	621a      	str	r2, [r3, #32]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d125      	bne.n	8002ed2 <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 f924 	bl	80030d8 <RTC_Bcd2ToByte>
 8002e90:	4603      	mov	r3, r0
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	785b      	ldrb	r3, [r3, #1]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f91b 	bl	80030d8 <RTC_Bcd2ToByte>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	789b      	ldrb	r3, [r3, #2]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 f912 	bl	80030d8 <RTC_Bcd2ToByte>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f908 	bl	80030d8 <RTC_Bcd2ToByte>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002ee6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002eea:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002f18:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fd fc5e 	bl	80007dc <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00b      	beq.n	8002f54 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f4c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8dc 	bl	800310c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40010400 	.word	0x40010400

08002f68 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f7e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002f80:	f7fd fdf6 	bl	8000b70 <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f86:	e009      	b.n	8002f9c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002f88:	f7fd fdf2 	bl	8000b70 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f96:	d901      	bls.n	8002f9c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e007      	b.n	8002fac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0ee      	beq.n	8002f88 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d120      	bne.n	8003010 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fd8:	f7fd fdca 	bl	8000b70 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fde:	e00d      	b.n	8002ffc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002fe0:	f7fd fdc6 	bl	8000b70 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fee:	d905      	bls.n	8002ffc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <RTC_EnterInitMode+0x5c>
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d1e7      	bne.n	8002fe0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003028:	4b1a      	ldr	r3, [pc, #104]	; (8003094 <RTC_ExitInitMode+0x78>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <RTC_ExitInitMode+0x78>)
 800302e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003032:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003034:	4b17      	ldr	r3, [pc, #92]	; (8003094 <RTC_ExitInitMode+0x78>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10c      	bne.n	800305a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff91 	bl	8002f68 <HAL_RTC_WaitForSynchro>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01e      	beq.n	800308a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	73fb      	strb	r3, [r7, #15]
 8003058:	e017      	b.n	800308a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800305a:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <RTC_ExitInitMode+0x78>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <RTC_ExitInitMode+0x78>)
 8003060:	f023 0320 	bic.w	r3, r3, #32
 8003064:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff ff7e 	bl	8002f68 <HAL_RTC_WaitForSynchro>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2203      	movs	r2, #3
 8003076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <RTC_ExitInitMode+0x78>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	4a04      	ldr	r2, [pc, #16]	; (8003094 <RTC_ExitInitMode+0x78>)
 8003084:	f043 0320 	orr.w	r3, r3, #32
 8003088:	6093      	str	r3, [r2, #8]
  }

  return status;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40002800 	.word	0x40002800

08003098 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80030aa:	e005      	b.n	80030b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	3b0a      	subs	r3, #10
 80030b6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80030b8:	7afb      	ldrb	r3, [r7, #11]
 80030ba:	2b09      	cmp	r3, #9
 80030bc:	d8f6      	bhi.n	80030ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	b2db      	uxtb	r3, r3
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	4413      	add	r3, r2
 80030fe:	b2db      	uxtb	r3, r3
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e040      	b.n	80031b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d106      	bne.n	8003148 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fbd8 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2224      	movs	r2, #36	; 0x24
 800314c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f82c 	bl	80031bc <UART_SetConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e022      	b.n	80031b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fad8 	bl	800372c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800318a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800319a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0201 	orr.w	r2, r2, #1
 80031aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fb5f 	bl	8003870 <UART_CheckIdleState>
 80031b2:	4603      	mov	r3, r0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b08a      	sub	sp, #40	; 0x28
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4ba4      	ldr	r3, [pc, #656]	; (800347c <UART_SetConfig+0x2c0>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f4:	430b      	orrs	r3, r1
 80031f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a99      	ldr	r2, [pc, #612]	; (8003480 <UART_SetConfig+0x2c4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	4313      	orrs	r3, r2
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	430a      	orrs	r2, r1
 800323a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a90      	ldr	r2, [pc, #576]	; (8003484 <UART_SetConfig+0x2c8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d126      	bne.n	8003294 <UART_SetConfig+0xd8>
 8003246:	4b90      	ldr	r3, [pc, #576]	; (8003488 <UART_SetConfig+0x2cc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d81b      	bhi.n	800328c <UART_SetConfig+0xd0>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0xa0>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	0800326d 	.word	0x0800326d
 8003260:	0800327d 	.word	0x0800327d
 8003264:	08003275 	.word	0x08003275
 8003268:	08003285 	.word	0x08003285
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003272:	e116      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003274:	2302      	movs	r3, #2
 8003276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800327a:	e112      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800327c:	2304      	movs	r3, #4
 800327e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003282:	e10e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003284:	2308      	movs	r3, #8
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800328a:	e10a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800328c:	2310      	movs	r3, #16
 800328e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003292:	e106      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a7c      	ldr	r2, [pc, #496]	; (800348c <UART_SetConfig+0x2d0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d138      	bne.n	8003310 <UART_SetConfig+0x154>
 800329e:	4b7a      	ldr	r3, [pc, #488]	; (8003488 <UART_SetConfig+0x2cc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b0c      	cmp	r3, #12
 80032aa:	d82d      	bhi.n	8003308 <UART_SetConfig+0x14c>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0xf8>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032e9 	.word	0x080032e9
 80032b8:	08003309 	.word	0x08003309
 80032bc:	08003309 	.word	0x08003309
 80032c0:	08003309 	.word	0x08003309
 80032c4:	080032f9 	.word	0x080032f9
 80032c8:	08003309 	.word	0x08003309
 80032cc:	08003309 	.word	0x08003309
 80032d0:	08003309 	.word	0x08003309
 80032d4:	080032f1 	.word	0x080032f1
 80032d8:	08003309 	.word	0x08003309
 80032dc:	08003309 	.word	0x08003309
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003301 	.word	0x08003301
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ee:	e0d8      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80032f0:	2302      	movs	r3, #2
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032f6:	e0d4      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80032f8:	2304      	movs	r3, #4
 80032fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fe:	e0d0      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003300:	2308      	movs	r3, #8
 8003302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003306:	e0cc      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003308:	2310      	movs	r3, #16
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330e:	e0c8      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <UART_SetConfig+0x2d4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <UART_SetConfig+0x1aa>
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <UART_SetConfig+0x2cc>)
 800331c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003320:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003324:	2b30      	cmp	r3, #48	; 0x30
 8003326:	d016      	beq.n	8003356 <UART_SetConfig+0x19a>
 8003328:	2b30      	cmp	r3, #48	; 0x30
 800332a:	d818      	bhi.n	800335e <UART_SetConfig+0x1a2>
 800332c:	2b20      	cmp	r3, #32
 800332e:	d00a      	beq.n	8003346 <UART_SetConfig+0x18a>
 8003330:	2b20      	cmp	r3, #32
 8003332:	d814      	bhi.n	800335e <UART_SetConfig+0x1a2>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <UART_SetConfig+0x182>
 8003338:	2b10      	cmp	r3, #16
 800333a:	d008      	beq.n	800334e <UART_SetConfig+0x192>
 800333c:	e00f      	b.n	800335e <UART_SetConfig+0x1a2>
 800333e:	2300      	movs	r3, #0
 8003340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003344:	e0ad      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003346:	2302      	movs	r3, #2
 8003348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334c:	e0a9      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800334e:	2304      	movs	r3, #4
 8003350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003354:	e0a5      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003356:	2308      	movs	r3, #8
 8003358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335c:	e0a1      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800335e:	2310      	movs	r3, #16
 8003360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003364:	e09d      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a4a      	ldr	r2, [pc, #296]	; (8003494 <UART_SetConfig+0x2d8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d125      	bne.n	80033bc <UART_SetConfig+0x200>
 8003370:	4b45      	ldr	r3, [pc, #276]	; (8003488 <UART_SetConfig+0x2cc>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800337a:	2bc0      	cmp	r3, #192	; 0xc0
 800337c:	d016      	beq.n	80033ac <UART_SetConfig+0x1f0>
 800337e:	2bc0      	cmp	r3, #192	; 0xc0
 8003380:	d818      	bhi.n	80033b4 <UART_SetConfig+0x1f8>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d00a      	beq.n	800339c <UART_SetConfig+0x1e0>
 8003386:	2b80      	cmp	r3, #128	; 0x80
 8003388:	d814      	bhi.n	80033b4 <UART_SetConfig+0x1f8>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <UART_SetConfig+0x1d8>
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d008      	beq.n	80033a4 <UART_SetConfig+0x1e8>
 8003392:	e00f      	b.n	80033b4 <UART_SetConfig+0x1f8>
 8003394:	2300      	movs	r3, #0
 8003396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339a:	e082      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800339c:	2302      	movs	r3, #2
 800339e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a2:	e07e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033a4:	2304      	movs	r3, #4
 80033a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033aa:	e07a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033ac:	2308      	movs	r3, #8
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e076      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033b4:	2310      	movs	r3, #16
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e072      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a35      	ldr	r2, [pc, #212]	; (8003498 <UART_SetConfig+0x2dc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12a      	bne.n	800341c <UART_SetConfig+0x260>
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <UART_SetConfig+0x2cc>)
 80033c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033d4:	d01a      	beq.n	800340c <UART_SetConfig+0x250>
 80033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033da:	d81b      	bhi.n	8003414 <UART_SetConfig+0x258>
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d00c      	beq.n	80033fc <UART_SetConfig+0x240>
 80033e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e6:	d815      	bhi.n	8003414 <UART_SetConfig+0x258>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <UART_SetConfig+0x238>
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d008      	beq.n	8003404 <UART_SetConfig+0x248>
 80033f2:	e00f      	b.n	8003414 <UART_SetConfig+0x258>
 80033f4:	2300      	movs	r3, #0
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e052      	b.n	80034a2 <UART_SetConfig+0x2e6>
 80033fc:	2302      	movs	r3, #2
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e04e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003404:	2304      	movs	r3, #4
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e04a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800340c:	2308      	movs	r3, #8
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e046      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003414:	2310      	movs	r3, #16
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e042      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a17      	ldr	r2, [pc, #92]	; (8003480 <UART_SetConfig+0x2c4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d13a      	bne.n	800349c <UART_SetConfig+0x2e0>
 8003426:	4b18      	ldr	r3, [pc, #96]	; (8003488 <UART_SetConfig+0x2cc>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003434:	d01a      	beq.n	800346c <UART_SetConfig+0x2b0>
 8003436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800343a:	d81b      	bhi.n	8003474 <UART_SetConfig+0x2b8>
 800343c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003440:	d00c      	beq.n	800345c <UART_SetConfig+0x2a0>
 8003442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003446:	d815      	bhi.n	8003474 <UART_SetConfig+0x2b8>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <UART_SetConfig+0x298>
 800344c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003450:	d008      	beq.n	8003464 <UART_SetConfig+0x2a8>
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x2b8>
 8003454:	2300      	movs	r3, #0
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e022      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e01e      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e01a      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e016      	b.n	80034a2 <UART_SetConfig+0x2e6>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800347a:	e012      	b.n	80034a2 <UART_SetConfig+0x2e6>
 800347c:	efff69f3 	.word	0xefff69f3
 8003480:	40008000 	.word	0x40008000
 8003484:	40013800 	.word	0x40013800
 8003488:	40021000 	.word	0x40021000
 800348c:	40004400 	.word	0x40004400
 8003490:	40004800 	.word	0x40004800
 8003494:	40004c00 	.word	0x40004c00
 8003498:	40005000 	.word	0x40005000
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a9f      	ldr	r2, [pc, #636]	; (8003724 <UART_SetConfig+0x568>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d17a      	bne.n	80035a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d824      	bhi.n	80034fe <UART_SetConfig+0x342>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <UART_SetConfig+0x300>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ef 	.word	0x080034ef
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034ff 	.word	0x080034ff
 80034d8:	080034ff 	.word	0x080034ff
 80034dc:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fc18 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80034e4:	61f8      	str	r0, [r7, #28]
        break;
 80034e6:	e010      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b8f      	ldr	r3, [pc, #572]	; (8003728 <UART_SetConfig+0x56c>)
 80034ea:	61fb      	str	r3, [r7, #28]
        break;
 80034ec:	e00d      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7fe fb79 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 80034f2:	61f8      	str	r0, [r7, #28]
        break;
 80034f4:	e009      	b.n	800350a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	61fb      	str	r3, [r7, #28]
        break;
 80034fc:	e005      	b.n	800350a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80fb 	beq.w	8003708 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	429a      	cmp	r2, r3
 8003520:	d305      	bcc.n	800352e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	429a      	cmp	r2, r3
 800352c:	d903      	bls.n	8003536 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003534:	e0e8      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2200      	movs	r2, #0
 800353a:	461c      	mov	r4, r3
 800353c:	4615      	mov	r5, r2
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	022b      	lsls	r3, r5, #8
 8003548:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800354c:	0222      	lsls	r2, r4, #8
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	6849      	ldr	r1, [r1, #4]
 8003552:	0849      	lsrs	r1, r1, #1
 8003554:	2000      	movs	r0, #0
 8003556:	4688      	mov	r8, r1
 8003558:	4681      	mov	r9, r0
 800355a:	eb12 0a08 	adds.w	sl, r2, r8
 800355e:	eb43 0b09 	adc.w	fp, r3, r9
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003570:	4650      	mov	r0, sl
 8003572:	4659      	mov	r1, fp
 8003574:	f7fc fe28 	bl	80001c8 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003586:	d308      	bcc.n	800359a <UART_SetConfig+0x3de>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358e:	d204      	bcs.n	800359a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	60da      	str	r2, [r3, #12]
 8003598:	e0b6      	b.n	8003708 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035a0:	e0b2      	b.n	8003708 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035aa:	d15e      	bne.n	800366a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80035ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d828      	bhi.n	8003606 <UART_SetConfig+0x44a>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x400>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035e9 	.word	0x080035e9
 80035c4:	080035f1 	.word	0x080035f1
 80035c8:	08003607 	.word	0x08003607
 80035cc:	080035f7 	.word	0x080035f7
 80035d0:	08003607 	.word	0x08003607
 80035d4:	08003607 	.word	0x08003607
 80035d8:	08003607 	.word	0x08003607
 80035dc:	080035ff 	.word	0x080035ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7fe fb98 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e014      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe fbaa 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 80035ec:	61f8      	str	r0, [r7, #28]
        break;
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f0:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <UART_SetConfig+0x56c>)
 80035f2:	61fb      	str	r3, [r7, #28]
        break;
 80035f4:	e00d      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe faf5 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 80035fa:	61f8      	str	r0, [r7, #28]
        break;
 80035fc:	e009      	b.n	8003612 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	61fb      	str	r3, [r7, #28]
        break;
 8003604:	e005      	b.n	8003612 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003610:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d077      	beq.n	8003708 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	005a      	lsls	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	085b      	lsrs	r3, r3, #1
 8003622:	441a      	add	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0f      	cmp	r3, #15
 8003632:	d916      	bls.n	8003662 <UART_SetConfig+0x4a6>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800363a:	d212      	bcs.n	8003662 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	b29a      	uxth	r2, r3
 8003652:	8afb      	ldrh	r3, [r7, #22]
 8003654:	4313      	orrs	r3, r2
 8003656:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	8afa      	ldrh	r2, [r7, #22]
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e052      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003668:	e04e      	b.n	8003708 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800366a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800366e:	2b08      	cmp	r3, #8
 8003670:	d827      	bhi.n	80036c2 <UART_SetConfig+0x506>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0x4bc>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	0800369d 	.word	0x0800369d
 800367c:	080036a5 	.word	0x080036a5
 8003680:	080036ad 	.word	0x080036ad
 8003684:	080036c3 	.word	0x080036c3
 8003688:	080036b3 	.word	0x080036b3
 800368c:	080036c3 	.word	0x080036c3
 8003690:	080036c3 	.word	0x080036c3
 8003694:	080036c3 	.word	0x080036c3
 8003698:	080036bb 	.word	0x080036bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7fe fb3a 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 80036a0:	61f8      	str	r0, [r7, #28]
        break;
 80036a2:	e014      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7fe fb4c 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 80036a8:	61f8      	str	r0, [r7, #28]
        break;
 80036aa:	e010      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <UART_SetConfig+0x56c>)
 80036ae:	61fb      	str	r3, [r7, #28]
        break;
 80036b0:	e00d      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b2:	f7fe fa97 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 80036b6:	61f8      	str	r0, [r7, #28]
        break;
 80036b8:	e009      	b.n	80036ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e005      	b.n	80036ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036cc:	bf00      	nop
    }

    if (pclk != 0U)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d019      	beq.n	8003708 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	085a      	lsrs	r2, r3, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	441a      	add	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b0f      	cmp	r3, #15
 80036ec:	d909      	bls.n	8003702 <UART_SetConfig+0x546>
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036f4:	d205      	bcs.n	8003702 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e002      	b.n	8003708 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003714:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003718:	4618      	mov	r0, r3
 800371a:	3728      	adds	r7, #40	; 0x28
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	40008000 	.word	0x40008000
 8003728:	00f42400 	.word	0x00f42400

0800372c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01a      	beq.n	8003842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382a:	d10a      	bne.n	8003842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af02      	add	r7, sp, #8
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003880:	f7fd f976 	bl	8000b70 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0308 	and.w	r3, r3, #8
 8003890:	2b08      	cmp	r3, #8
 8003892:	d10e      	bne.n	80038b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 f82d 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e023      	b.n	80038fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d10e      	bne.n	80038de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f817 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e00d      	b.n	80038fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b09c      	sub	sp, #112	; 0x70
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003912:	e0a5      	b.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	f000 80a1 	beq.w	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fd f927 	bl	8000b70 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <UART_WaitOnFlagUntilTimeout+0x32>
 800392e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003930:	2b00      	cmp	r3, #0
 8003932:	d13e      	bne.n	80039b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003948:	667b      	str	r3, [r7, #100]	; 0x64
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	461a      	mov	r2, r3
 8003950:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003952:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003954:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003958:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e6      	bne.n	8003934 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3308      	adds	r3, #8
 800396c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	663b      	str	r3, [r7, #96]	; 0x60
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003986:	64ba      	str	r2, [r7, #72]	; 0x48
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800398c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2220      	movs	r2, #32
 80039a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e067      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d04f      	beq.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d147      	bne.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	637b      	str	r3, [r7, #52]	; 0x34
 80039fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a2c:	623a      	str	r2, [r7, #32]
 8003a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	69f9      	ldr	r1, [r7, #28]
 8003a32:	6a3a      	ldr	r2, [r7, #32]
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e010      	b.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	bf0c      	ite	eq
 8003a70:	2301      	moveq	r3, #1
 8003a72:	2300      	movne	r3, #0
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	461a      	mov	r2, r3
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f43f af4a 	beq.w	8003914 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3770      	adds	r7, #112	; 0x70
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <__libc_init_array>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ac4 <__libc_init_array+0x38>)
 8003a90:	4c0d      	ldr	r4, [pc, #52]	; (8003ac8 <__libc_init_array+0x3c>)
 8003a92:	1b64      	subs	r4, r4, r5
 8003a94:	10a4      	asrs	r4, r4, #2
 8003a96:	2600      	movs	r6, #0
 8003a98:	42a6      	cmp	r6, r4
 8003a9a:	d109      	bne.n	8003ab0 <__libc_init_array+0x24>
 8003a9c:	4d0b      	ldr	r5, [pc, #44]	; (8003acc <__libc_init_array+0x40>)
 8003a9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ad0 <__libc_init_array+0x44>)
 8003aa0:	f000 f820 	bl	8003ae4 <_init>
 8003aa4:	1b64      	subs	r4, r4, r5
 8003aa6:	10a4      	asrs	r4, r4, #2
 8003aa8:	2600      	movs	r6, #0
 8003aaa:	42a6      	cmp	r6, r4
 8003aac:	d105      	bne.n	8003aba <__libc_init_array+0x2e>
 8003aae:	bd70      	pop	{r4, r5, r6, pc}
 8003ab0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab4:	4798      	blx	r3
 8003ab6:	3601      	adds	r6, #1
 8003ab8:	e7ee      	b.n	8003a98 <__libc_init_array+0xc>
 8003aba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003abe:	4798      	blx	r3
 8003ac0:	3601      	adds	r6, #1
 8003ac2:	e7f2      	b.n	8003aaa <__libc_init_array+0x1e>
 8003ac4:	08003b4c 	.word	0x08003b4c
 8003ac8:	08003b4c 	.word	0x08003b4c
 8003acc:	08003b4c 	.word	0x08003b4c
 8003ad0:	08003b50 	.word	0x08003b50

08003ad4 <memset>:
 8003ad4:	4402      	add	r2, r0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d100      	bne.n	8003ade <memset+0xa>
 8003adc:	4770      	bx	lr
 8003ade:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae2:	e7f9      	b.n	8003ad8 <memset+0x4>

08003ae4 <_init>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr

08003af0 <_fini>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	bf00      	nop
 8003af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003af6:	bc08      	pop	{r3}
 8003af8:	469e      	mov	lr, r3
 8003afa:	4770      	bx	lr
